{"version":3,"file":"static/js/342.55e20bec.chunk.js","mappings":"uLAwEA,UA/DiB,WACf,IAAQA,GAAMC,EAAAA,EAAAA,MAAND,EACFE,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,WACvBC,GAAgBF,EAAAA,EAAAA,IAAYG,EAAAA,GAAAA,cAElC,OAAOJ,EAASK,KAAI,gBAAGC,EAAE,EAAFA,GAAIC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAS,OACxC,eAAaC,UAAU,iBAAgB,UACrC,iBACEC,KAAK,QACLD,UAAU,iCAAgC,WAE1C,oBACEE,QAAS,kBAAMb,GAASc,EAAAA,EAAAA,IAAiB,CAAEN,GAAAA,EAAIC,KAAAA,EAAMC,UAAAA,IAAa,EAClEK,KAAK,SACLJ,UAAS,uDACPN,EAAcG,KAAOA,GAAMH,EAAcI,OAASA,EAAO,gBAAkB,IAC1E,WAEH,iBAAME,UAAU,OAAM,SAAC,MACtBF,KAEFC,GACC,UAAC,IAAQ,YACP,SAAC,WAAe,CACdM,QACIX,EAAcG,KAAOA,EAAK,YAAc,GAE5CA,GAAG,iBAAgB,UAEnB,iBAAMG,UAAU,kBAAiB,SAAC,+GAKpC,SAAC,SAAa,UACX,CAAC,WAAY,YAAYJ,KAAI,SAACU,GAAM,OACnC,SAAC,SAAa,CAEZJ,QAAS,WACPb,GAASkB,EAAAA,EAAAA,IAAc,CACrBV,GAAAA,EACAC,KAAAA,EACAC,UAAAA,KAEFV,GAASmB,EAAAA,EAAAA,IAAY,CAAEF,OAAAA,EAAQG,KAAM,CAAEZ,GAAAA,EAAIC,KAAAA,KAC7C,EAAE,UAEF,4BACG,IACAX,EAAE,0BAAD,OAA2BmB,QAZ1BA,EAcS,SAIpB,SAjDCT,EAmDJ,GAET,C","sources":["components/Channels.jsx"],"sourcesContent":["import { React } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport {\n  setActiveChannel, selectChannel, channelSelector, channelControlSelector,\n} from '../slices/channelsSlice';\nimport { renderModal } from '../slices/modalSlice';\n\nconst Channels = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const channels = useSelector(channelSelector.selectAll);\n  const activeChannel = useSelector(channelControlSelector.selectActive);\n\n  return channels.map(({ id, name, removable }) => (\n    <li key={id} className=\"nav-item w-100\">\n      <div\n        role=\"group\"\n        className=\"d-flex show dropdown btn-group\"\n      >\n        <button\n          onClick={() => dispatch(setActiveChannel({ id, name, removable }))}\n          type=\"button\"\n          className={`w-100 rounded-0 text-start text-truncate btn ${\n            activeChannel.id === id || activeChannel.name === name ? 'btn-secondary' : ''\n          }`}\n        >\n          <span className=\"me-1\">#</span>\n          {name}\n        </button>\n        {removable ? (\n          <Dropdown>\n            <Dropdown.Toggle\n              variant={\n                  activeChannel.id === id ? 'secondary' : ''\n                }\n              id=\"dropdown-basic\"\n            >\n              <span className=\"visually-hidden\">\n                Управление каналом\n              </span>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              {['removing', 'renaming'].map((action) => (\n                <Dropdown.Item\n                  key={action}\n                  onClick={() => {\n                    dispatch(selectChannel({\n                      id,\n                      name,\n                      removable,\n                    }));\n                    dispatch(renderModal({ action, item: { id, name } }));\n                  }}\n                >\n                  <span>\n                    {' '}\n                    {t(`headers.dropDown_links.${action}`)}\n                  </span>\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n          </Dropdown>\n        ) : null}\n      </div>\n    </li>\n  ));\n};\n\nexport default Channels;\n"],"names":["t","useTranslation","dispatch","useDispatch","channels","useSelector","channelSelector","activeChannel","channelControlSelector","map","id","name","removable","className","role","onClick","setActiveChannel","type","variant","action","selectChannel","renderModal","item"],"sourceRoot":""}